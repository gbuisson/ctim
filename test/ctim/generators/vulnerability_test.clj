(ns ctim.generators.vulnerability-test
  (:require [clj-momo.test-helpers.core :as mth]
            [clojure.test :refer [use-fixtures]]
            [clojure.test.check.clojure-test :refer [defspec]]
            [ctim.schemas.vulnerability :as vulnerability]
            [ctim.test-helpers
             [core :as th]
             [properties :as property]]
            [flanders.utils :as fu]))

(use-fixtures :once
  th/fixture-spec-validation
  th/fixture-fast-gen
  mth/fixture-schema-validation
  (th/fixture-spec vulnerability/Vulnerability
                   "test.vulnerability")
  (th/fixture-spec vulnerability/NewVulnerability
                   "test.new-vulnerability")
  (th/fixture-spec (fu/require-all vulnerability/Vulnerability)
                   "test.max.vulnerability")
  (th/fixture-spec (fu/require-all vulnerability/NewVulnerability)
                   "test.max.new-vulnerability"))

;; Vulnerability

(defspec ^:gen spec-generated-vulnerability-is-valid
  (property/generated-entity-is-valid :test.vulnerability/map))

(defspec ^:gen spec-generated-max-vulnerability-is-valid
  (property/generated-entity-is-valid :test.max.vulnerability/map))

(defspec ^:gen spec-generated-vulnerability-id-is-valid
  (property/generated-entity-id-is-valid :test.vulnerability/map
                                         "vulnerability"))

;; New Vulnerability

(defspec ^:gen spec-generated-new-vulnerability-is-valid
  (property/generated-entity-is-valid :test.new-vulnerability/map))

(defspec ^:gen spec-generated-max-new-vulnerability-is-valid
  (property/generated-entity-is-valid :test.max.vulnerability/map))

(defspec ^:gen spec-generated-new-vulnerability-id-is-valid
  (property/generated-entity-id-is-valid :test.new-vulnerability/map
                                         "vulnerability"
                                         :optional))
